Clients provide implementations of the Task interface which performs some application-specific operation.

Clients utilize the TaskExecutor.addTask() method to add these tasks to the Blocking FIFO queue.

Pooled threads remove the tasks from the queue and call the Task’s execute() method.

This Task executes for some amount of time before completing by returning from the execute() method.

At this point the task-running threads attempts to obtain a new Task from the queue.

If the blocking queue is empty (no tasks to execute) the task running thread’s execution must be blocked until
a new task is added to the task queue. If the blocking queue is full (no space to add a new task) the client’s
thread’s execution must be blocked until a task is been removed from the queue.

This is a FIFO queue that is both thread-safe and blocking.
Because the queue is internal to the TaskExecutor, the project does not specify the queue’s interface.

The three restrictions are
1) teams must implement their BlockingFIFO using the boundedbuffer designas provided in the book (and later in this document)
2) the BlockingFIFO must implement using Java Objects as monitors (Not Semaphores) as described in this document and
3) implementations must be based on using an array of Task as its container. That is, the size of the queue must be
fixed when the container is created. The FIFO implementation size (array length) must be no more than 100 elements.
Implementations cannot use any of Java’s built-in container classes (e.g. ArrayList) which has its built-in synchronization.

3. The classes implementing the TaskExecutor, BlockingFIFO, Thread Pool cannot contain synchronized methods.
 All of the synchronization must be implemented using primitive Object monitors. Also synchronized block will be needed

14. When the number of inserted tasks exceeds the number of threads, unexecuted tasks will remain on the BlockingFIFO until removed by a task running thread.

15. Every pooled thread’s execution must block when the BlockingFIFO is empty i.e. Pool threads should not spin or busy-wait
when attempting to obtain a task from the service’s empty FIFO.

16. When the BlockingFIFO is full, client threads attempting to add a new task to the queue must block until a Task is removed.
Again, no polling, or busy waiting is allowed.

Be aware that this design contains a race condition that needs to be addressed in your BlockingFIFO implementation.
The race condition exists between threads that are unblocked by the notEmpty / notFull monitors
and the other concurrently executing threads.

